from Node import Nodeimport sys# delivering and process the inputfile = "TXTs/Input_1.txt"if len(sys.argv) == 2:    file = sys.argv[1]with open(file, "r") as initial_input:    initial_input = initial_input.read()    initial_input = initial_input.split("\n")initial_input = [i for i in initial_input if i != ""]initial_input = [i.split(",") for i in initial_input]Nodes = []#  creating Nodes based on adjacency matrixfor i in range(len(initial_input)):    Nodes.append(Node(initial_input, i))dv_status = "on"while dv_status == "on":  # distance vector Emulator    CLI_status = "on"    while True:  # responsible for placing Distance vectors in node's queue (Network's Role)        breaker = 0        for node in Nodes:            if node.new_information == 1:                node.new_information = 0                for j in node.neighbors:                    current_neighbor = Nodes[j]                    current_neighbor.queue.append(node.vector)            else:                breaker += 1        if breaker == len(Nodes):            break        for node in Nodes:  # responsible for updating distance vector of each node            node.vector_update()# ---------------------------------------------------------------------------------------------    while CLI_status == "on":  # Command Line Interface        node_answer = input("\ndo you want to see the distance vectors of any node[y/n]? ")        # removing additional spaces at the end        while True:            if len(node_answer) > 0:                if node_answer[-1] == " ":                    node_answer = node_answer[0:-1]                else:                    break            else:                break        # showing the distance vector of a nodes        if node_answer.lower() == "y":            while True:                target_node = input("\nenter a node number(enter -1 to exit): ")                try:                    if (0 <= int(target_node)) & (int(target_node) < len(Nodes)):                        print(f"\ndistance vector of node number {target_node} is as follow:")                        Nodes[int(target_node)].show_dv()                    elif int(target_node) == -1:                        CLI_status = "off"                        break                    else:                        print(f"\nnode number is between 0 and {len(Nodes)-1}")                except ValueError:                    print(f"\nnode number is a 'number'")        elif node_answer.lower() == "n":            CLI_status = "off"        else:            print("\nyou should choose between 'y' and 'n'")# ---------------------------------------------------------------------------------------------    while True:        Request = input("\nenter you request: ")        # removing additional spaces at the end        while True:            if len(Request) > 0:                if Request[-1] == " ":                    Request = Request[0:-1]                else:                    break            else:                break        # link update        if Request[0:2].lower() == "lu":            inputs = Request[3:].split(" ")            if len(inputs) == 3:                try:                    first_node = int(inputs[0])                    second_node = int(inputs[1])                    new_cost = int(inputs[2])                except ValueError:                    print("\n[INCORRECT PATTERN]the correct pattern is as follow: \n"                          "'lu' 'first_node' 'second_node' 'new_cost'")                    continue                if int(Nodes[first_node].real_cost[second_node]) > 0:                    Nodes[first_node].link_update(second_node, new_cost)                    Nodes[second_node].link_update(first_node, new_cost)                    print(f"the link is now updated")                    break                else:                    print("no such link exits")            else:                print("\n[INCORRECT PATTERN]the correct pattern is as follow: \n"                      "'lu' 'first_node' 'second_node' 'new_cost'")        # exit the program        elif Request.lower() == "exit":            dv_status = "off"            break        # invalid command        else:            print("[INVALID COMMAND]\nyou should choose between lu and exit")